
The dataframe `df` is loaded and in memory. Columns are also named attributes.
Description of the dataset in `df` (column dtypes might be inaccurate):
"  

**PC1 Software defect prediction**  
One of the NASA Metrics Data Program defect data sets. Data from flight software for earth orbiting satellite. Data comes from McCabe and Halstead features extractors of source code.  These features were defined in the 70s in an attempt to objectively characterize code features that are associated with software quality.



 Attribute Information  

1. loc             : numeric % McCabe's line count of code
2. v(g)            : numeric % McCabe "cyclomatic complexity"
3. ev(g)           : numeric % McCabe "essential complexity"
4. iv(g)           : numeric % McCabe "design complexity"
5. n               : numeric % Halstead total operators + operands
6. v               : numeric % Halstead "volume"
7. l               : numeric % Halstead "program length"
8. d               : numeric % Halstead "difficulty"
9. i               : numeric % Halstead "intelligence"
10. e               : numeric % Halstead "effort"
11. b               : numeric % Halstead 
12. t               : numeric % Halstead's time estimator
13. lOCode          : numeric % Halstead's line count
14. lOComment       : numeric % Halstead's count of lines of comments
15. lOBlank         : numeric % Halstead's count of blank lines
16. lOCodeAndComment: numeric
17. uniq_Op         : numeric % unique operators
18. uniq_Opnd       : numeric % unique operands
19. total_Op        : numeric % total operators
20. total_Opnd      : numeric % total operands
21. branchCount     : numeric % of the flow graph
22. branchCount     : numeric % of the flow graph
23. defects         : {false,true} % module has/has not one or more reported defects



 Relevant papers  

- Shepperd, M. and Qinbao Song and Zhongbin Sun and Mair, C. (2013)
Data Quality: Some Comments on the NASA Software Defect Datasets, IEEE Transactions on Software Engineering, 39.

- Tim Menzies and Justin S. Di Stefano (2004) How Good is Your Blind Spot Sampling Policy? 2004 IEEE Conference on High Assurance
Software Engineering.

- T. Menzies and J. DiStefano and A. Orrego and R. Chapman (2004) Assessing Predictors of Software Defects", Workshop on Predictive Software Models, Chicago"

Columns in `df` (true feature dtypes listed here, categoricals encoded as int):
loc (float64): NaN-freq [0.0%], Samples [18.0, 9.0, 35.0, 13.0, 6.0, 20.0, 33.0, 4.0, 70.0, 69.0]
v(g) (float64): NaN-freq [0.0%], Samples [1.0, 3.0, 6.0, 1.0, 1.0, 5.0, 9.0, 1.0, 16.0, 12.0]
ev(g) (float64): NaN-freq [0.0%], Samples [1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 5.0, 1.0]
iv(G) (float64): NaN-freq [0.0%], Samples [1.0, 2.0, 5.0, 1.0, 1.0, 4.0, 5.0, 1.0, 8.0, 1.0]
N (float64): NaN-freq [0.0%], Samples [123.0, 37.0, 305.0, 49.0, 19.0, 149.0, 223.0, 9.0, 407.0, 536.0]
V (float64): NaN-freq [0.0%], Samples [584.85, 157.17, 1881.83, 218.51, 68.11, 751.61, 1338.0, 28.53, 2565.64, 3745.93]
L (float64): NaN-freq [0.0%], Samples [0.19, 0.07, 0.03, 0.23, 0.31, 0.02, 0.03, 0.33, 0.02, 0.04]
D (float64): NaN-freq [0.0%], Samples [5.3, 14.57, 29.85, 4.31, 3.21, 43.85, 39.36, 3.0, 56.02, 23.38]
I (float64): NaN-freq [0.0%], Samples [110.26, 10.79, 63.04, 50.67, 21.19, 17.14, 34.0, 9.51, 45.8, 160.24]
E (float64): NaN-freq [0.0%], Samples [3102.25, 2290.24, 56178.07, 942.33, 218.94, 32955.41, 52659.86, 85.59, 143728.12, 87570.07]
B (float64): NaN-freq [0.0%], Samples [0.19, 0.05, 0.63, 0.07, 0.02, 0.25, 0.45, 0.01, 0.86, 1.25]
T (float64): NaN-freq [0.0%], Samples [172.35, 127.24, 3121.0, 52.35, 12.16, 1830.86, 2925.55, 4.75, 7984.9, 4865.0]
lOCode (float64): NaN-freq [0.0%], Samples [18.0, 9.0, 35.0, 11.0, 6.0, 20.0, 28.0, 4.0, 68.0, 68.0]
lOComment (float64): NaN-freq [0.0%], Samples [5.0, 1.0, 7.0, 15.0, 0.0, 0.0, 1.0, 0.0, 7.0, 15.0]
locCodeAndComment (float64): NaN-freq [0.0%], Samples [0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 5.0, 0.0, 2.0, 1.0]
lOBlank (float64): NaN-freq [0.0%], Samples [5.0, 1.0, 7.0, 9.0, 0.0, 0.0, 1.0, 0.0, 18.0, 17.0]
uniq_Op (float64): NaN-freq [0.0%], Samples [4.0, 12.0, 21.0, 6.0, 5.0, 20.0, 29.0, 6.0, 30.0, 21.0]
uniq_Opnd (float64): NaN-freq [0.0%], Samples [23.0, 7.0, 51.0, 16.0, 7.0, 13.0, 35.0, 3.0, 49.0, 106.0]
total_Op (float64): NaN-freq [0.0%], Samples [62.0, 20.0, 160.0, 26.0, 10.0, 92.0, 128.0, 6.0, 224.0, 300.0]
total_Opnd (float64): NaN-freq [0.0%], Samples [61.0, 17.0, 145.0, 23.0, 9.0, 57.0, 95.0, 3.0, 183.0, 236.0]
branchCount (float64): NaN-freq [0.0%], Samples [1.0, 5.0, 11.0, 1.0, 1.0, 9.0, 15.0, 1.0, 27.0, 23.0]
defects (category): NaN-freq [0.0%], Samples [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]

    
This code was written by an expert datascientist working to improve predictions. It is a snippet of code that adds new columns to the dataset.
Number of samples (rows) in training dataset: 831
    
This code generates additional columns that are useful for a downstream classification algorithm (such as XGBoost) predicting "defects".
Additional columns add new semantic information, that is they use real world knowledge on the dataset. They can e.g. be feature combinations, transformations, aggregations where the new column is a function of the existing columns.
The scale of columns and offset does not matter. Make sure all used columns exist. Follow the above description of columns closely and consider the datatypes and meanings of classes.
This code also drops columns, if these may be redundant and hurt the predictive performance of the downstream classifier (Feature selection). Dropping columns may help as the chance of overfitting is lower, especially if the dataset is small.
The classifier will be trained on the dataset with the generated columns and evaluated on a holdout set. The evaluation metric is accuracy. The best performing code will be selected.
Added columns can be used in other codeblocks, dropped columns are not available anymore.

Code formatting for each added column:
```python
# (Feature name and description)
# Usefulness: (Description why this adds useful real world knowledge to classify "defects" according to dataset description and attributes.)
# Input samples: (Three samples of the columns used in the following code, e.g. 'loc': [18.0, 9.0, 35.0], 'v(g)': [1.0, 3.0, 6.0], ...)
(Some pandas code using loc', 'v(g)', ... to add a new column for each row in df)
```end

Code formatting for dropping columns:
```python
# Explanation why the column XX is dropped
df.drop(columns=['XX'], inplace=True)
```end

Each codeblock generates exactly one useful column and can drop unused columns (Feature selection).
Each codeblock ends with ```end and starts with "```python"
Codeblock:
